/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, CreateMsg, Cw20ReceiveMsg, QueryMsg, Addr, DetailsResponse, Cw20Coin, Coin, OrderbookResponse, OrderBucket, Order, StateResponse, State, UserOrdersResponse, ListResponse } from "./Sg721.types";
export interface Sg721ReadOnlyInterface {
  contractAddress: string;
  list: () => Promise<ListResponse>;
  details: ({
    id
  }: {
    id: string;
  }) => Promise<DetailsResponse>;
  getOrderbook: () => Promise<OrderbookResponse>;
  getUserOrders: ({
    user
  }: {
    user: Addr;
  }) => Promise<UserOrdersResponse>;
  getState: () => Promise<StateResponse>;
}
export class Sg721QueryClient implements Sg721ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.list = this.list.bind(this);
    this.details = this.details.bind(this);
    this.getOrderbook = this.getOrderbook.bind(this);
    this.getUserOrders = this.getUserOrders.bind(this);
    this.getState = this.getState.bind(this);
  }

  list = async (): Promise<ListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list: {}
    });
  };
  details = async ({
    id
  }: {
    id: string;
  }): Promise<DetailsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      details: {
        id
      }
    });
  };
  getOrderbook = async (): Promise<OrderbookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_orderbook: {}
    });
  };
  getUserOrders = async ({
    user
  }: {
    user: Addr;
  }): Promise<UserOrdersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_orders: {
        user
      }
    });
  };
  getState = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_state: {}
    });
  };
}
export interface Sg721Interface extends Sg721ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  create: ({
    arbiter,
    cw20Whitelist,
    description,
    endHeight,
    endTime,
    id,
    recipient,
    title
  }: {
    arbiter: string;
    cw20Whitelist?: string[];
    description: string;
    endHeight?: number;
    endTime?: number;
    id: string;
    recipient?: string;
    title: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  topUp: ({
    id
  }: {
    id: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setRecipient: ({
    id,
    recipient
  }: {
    id: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  approve: ({
    id
  }: {
    id: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  refund: ({
    id
  }: {
    id: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelBid: ({
    orderId,
    price
  }: {
    orderId: string;
    price: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelAsk: ({
    orderId,
    price
  }: {
    orderId: string;
    price: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateBidOrder: ({
    id,
    newQuantity
  }: {
    id: string;
    newQuantity: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateAskOrder: ({
    id,
    newQuantity
  }: {
    id: string;
    newQuantity: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Sg721Client extends Sg721QueryClient implements Sg721Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.create = this.create.bind(this);
    this.topUp = this.topUp.bind(this);
    this.setRecipient = this.setRecipient.bind(this);
    this.approve = this.approve.bind(this);
    this.refund = this.refund.bind(this);
    this.receive = this.receive.bind(this);
    this.cancelBid = this.cancelBid.bind(this);
    this.cancelAsk = this.cancelAsk.bind(this);
    this.updateBidOrder = this.updateBidOrder.bind(this);
    this.updateAskOrder = this.updateAskOrder.bind(this);
  }

  create = async ({
    arbiter,
    cw20Whitelist,
    description,
    endHeight,
    endTime,
    id,
    recipient,
    title
  }: {
    arbiter: string;
    cw20Whitelist?: string[];
    description: string;
    endHeight?: number;
    endTime?: number;
    id: string;
    recipient?: string;
    title: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create: {
        arbiter,
        cw20_whitelist: cw20Whitelist,
        description,
        end_height: endHeight,
        end_time: endTime,
        id,
        recipient,
        title
      }
    }, fee, memo, _funds);
  };
  topUp = async ({
    id
  }: {
    id: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      top_up: {
        id
      }
    }, fee, memo, _funds);
  };
  setRecipient = async ({
    id,
    recipient
  }: {
    id: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_recipient: {
        id,
        recipient
      }
    }, fee, memo, _funds);
  };
  approve = async ({
    id
  }: {
    id: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve: {
        id
      }
    }, fee, memo, _funds);
  };
  refund = async ({
    id
  }: {
    id: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      refund: {
        id
      }
    }, fee, memo, _funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  cancelBid = async ({
    orderId,
    price
  }: {
    orderId: string;
    price: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_bid: {
        order_id: orderId,
        price
      }
    }, fee, memo, _funds);
  };
  cancelAsk = async ({
    orderId,
    price
  }: {
    orderId: string;
    price: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_ask: {
        order_id: orderId,
        price
      }
    }, fee, memo, _funds);
  };
  updateBidOrder = async ({
    id,
    newQuantity
  }: {
    id: string;
    newQuantity: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_bid_order: {
        id,
        new_quantity: newQuantity
      }
    }, fee, memo, _funds);
  };
  updateAskOrder = async ({
    id,
    newQuantity
  }: {
    id: string;
    newQuantity: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ask_order: {
        id,
        new_quantity: newQuantity
      }
    }, fee, memo, _funds);
  };
}